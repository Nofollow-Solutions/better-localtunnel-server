#!/usr/bin/env node -r esm

const { program } = require('commander');

const log = require('book');
const Debug = require('debug');

const CreateServer = require('../server');

const debug = Debug('localtunnel');

program
    .option('--secure', 'use this flag to indicate proxy over https')
    .option('--port <port>', 'listen on this port for outside requests', 80)
    .option('--address <address>', 'IP address to bind to', '0.0.0.0')
    .option('--domain <domain>', 'IP address to bind to', 'Specify the base domain name. This is optional if hosting localtunnel from a regular example.com domain. This is required if hosting a localtunnel server from a subdomain (i.e. lt.example.dom where clients will be client-app.lt.example.come)')
    .option('--max-sockets <sockets>', 'maximum number of tcp sockets each client is allowed to establish at one time (the tunnels)', 10);

  
program.showHelpAfterError('(add --help for additional information)');
program.showSuggestionAfterError();

program.parse();

const options = program.opts();

const server = CreateServer({
    max_tcp_sockets: options['max-sockets'],
    secure: options.secure,
    domain: options.domain,
});

server.listen(options.port, options.address, () => {
    debug('server listening on port: %d', server.address().port);
});

process.on('SIGINT', () => {
    process.exit();
});

process.on('SIGTERM', () => {
    process.exit();
});

process.on('uncaughtException', (err) => {
    log.error(err);
});

process.on('unhandledRejection', (reason, promise) => {
    log.error(reason);
});

// vim: ft=javascript

